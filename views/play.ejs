<section id="play">
    <div class="play-container">
        <div class="play-menu">
            <ul>
                <li id="play-random">Play Random Words</li>
                <li id="play-custom">Play Custom</li>
            </ul>
        </div>
        <div class="play-game">
            <div class="loading">
                <p>Fetching Words...</p>
            </div>

            <div class="play-opening">
                <h2>SELECT GAME</h2>
            </div>

            <div class="play-start">
                <div class="play-start-header">
                    <p id="back"><i class="fas fa-arrow-left"></i></p>
                    <p>Score: <span id="score">0</span> / <span id="score-max">10</span></p>
                    <p id="speaker"><i class="fas fa-volume-up"></i></p>
                </div>
                <div class="play-start-word">
                    <p id="result"></p>
                    <p id="word">word</p>
                    <p id="definition"><strong>Definition:</strong> <span id="definition-val">Definition</span></p>
                    <button id="next">Next <i class="fas fa-arrow-right"></i></button>
                    <button id="play-again">Play Again <i class="fas fa-redo"></i></button>
                </div>

                <div class="play-start-spelling">
                    <input id="spelling" type="text" />
                    <input id="check" type="submit" value="Check">
                </div>
            </div>
        </div>
    </div>
</section>


<script>
    //Browser Speech API
    const speech = window.speechSynthesis;
    const voices = speech.getVoices();

    //Class to play game
    class playGame {
        constructor() {
            this.words = [];
            this.score = 0;
            this.playing = false;
            this.currentWord = 0;
        }

        //Function to compare if input is correct
        checkSpelling = () => {
            const userSpelling = $("#spelling").val();
            const currentWord = this.words[this.currentWord].word;


            //Conditional to check if word is correct
            if (userSpelling === currentWord) {
                $("#result").html("<i class='fas fa-check'></i>");
                this.score++;
                $("#score").html(this.score);
            } else {
                $("#result").html("<i class='fas fa-times'></i>");
            }

            //Shows the results of check
            $("#result").show();

            //Check current word is the last word
            //If not, it will display next button
            if ((this.currentWord + 1) !== this.words.length) {
                $("#next").show();
            }

            //Shows the current word when checking if correct
            $("#word").show();
            this.endGame();
        }

        //Display Next Word UI and word value
        nextWord = () => {
            $("#spelling").val('');
            this.currentWord++;
            $("#word").html(this.words[this.currentWord].word);
            $("#definition-val").html(this.words[this.currentWord].results[0].definition);
            $("#next").hide();
            $("#word").hide();
            $("#result").html("").hide();
            this.speak();
        }

        //Function to reset game
        resetGame = () => {
            this.words = [];
            this.score = 0;
            this.playing = false;
            this.currentWord = 0;
            $(".play-opening").show();
            $(".play-start").hide();
            $("#spelling").val('');
            $("#next").hide();
            $("#word").hide();
            $("#play-again").hide();
            $("#result").html("").hide();

            this.resetMobileUi();
        }

        //Function to start game
        startGame() {
            this.playing = true;
            $(".play-opening").hide();
            $(".play-start").css("display", "flex");
            $("#word").html(this.words[this.currentWord].word);
            $("#definition-val").html(this.words[this.currentWord].results[0].definition);
            $("#score").html(this.score);
            $("#score-max").html(this.words.length);
            this.speak();
        }

        //End of Game
        endGame() {
            //Game is over, show play again button
            if ((this.currentWord + 1) === this.words.length) {
                $("#play-again").show();
            }
        }

        //Plays same words received from API
        playAgain = () => {
            $("#play-again").hide();
            $("#word").hide();
            $("#result").hide();
            this.currentWord = 0;
            this.score = 0;
            $("#spelling").val('');
            this.startGame();
        }

        //Function to fetch random words from API
        getRandom = () => {
            //If in middle of game and user hits menu, ends current game 
            if (this.playing) return this.resetGame();
            this.mobileUi();
            $(".play-opening").hide();
            //Display Loading screen
            $(".loading").show();

            $.ajax({
                method: "GET",
                url: "/random",
                success: (response) => {
                    //Updates playGame array with words received from API
                    this.words = response;
                    //Remove loading screen
                    $(".loading").hide();
                    this.startGame();
                }
            })
        }

        //Function to fetch custom words
        getCustom = () => {
            //If in middle of game and user hits menu, ends current game
            if (this.playing) return this.resetGame();
            this.mobileUi();
            $(".play-opening").hide();

            //Display Loading screen
            $(".loading").show();
            $.ajax({
                method: "GET",
                url: "/custom/game",
            }).done(response => {
                //If the user isn't logged in, redirects to login page
                if (response.status === "failure") return window.location.href = "/login";

                //Updates playGame array with words received from API
                this.words = response;

                //Hides Loading screen
                $(".loading").hide();
                this.startGame();
            })
        }

        //Browser API to say currently selected word
        speak = () => {
            let message = new SpeechSynthesisUtterance(this.words[this.currentWord].word);
            message.voice = voices[0];
            speech.speak(message);
        }

        //Check window size to show mobile game UI
        mobileUi() {
            if ($(window).width() < 725) {
                $(".play-game").show();
                $(".play-menu").hide();
            }
        }

        //Check window size to show mobile menu UI
        resetMobileUi() {
            if ($(window).width() < 725) {
                $(".play-game").hide();
                $(".play-menu").css("display", "flex");
            }
        }
    };


    //Initializing game class
    const game = new playGame();

    //Event handlers
    $("#play-random").on("click", game.getRandom);
    $("#play-custom").on("click", game.getCustom);
    $("#check").on("click", game.checkSpelling);
    $("#speaker").on("click", game.speak);
    $("#next").on("click", game.nextWord);
    $("#play-again").on("click", game.playAgain);
    $("#back").on("click", game.resetGame);


</script>